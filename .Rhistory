p_top <- p_surf-pblh # Pa (above surface)
#
# Outputs
lwp <- 0.    # Liquid water path (g/m^2)
zb <- -999.    # Cloud base height (m)
zc <- -999.    # Cloud top height (m)
clw_max <- 0.    # Maximum cloud liquid water
#
# a) Integrate to cloud base altitude
dz <- 1.            # 1 m resolution
z <- 0.                # The first altitude
press <- p_surf    # Start from surface
RH <- 0
while (press>p_top & z<=z_top){
# Temperature (K)
tavg <-theta*(press/p00)**rcp
#
# Current RH (%)
RH <-calc_rh(rt,tavg,press)
if (RH>100)
zb <-z
break
#
# From z to z+dz
z <- z+dz
# Virtual temperature: T_virtual=T*(1+ep2*rl)
xsi <- (1+ep2*rt)
# Pressure (Pa)
press <- press-g*dz*press/(R*tavg*xsi)
}
#
# No cloud or cloud water
if (RH<=100)
return (c(lwp, zb, zc, clw_max))
zb <-z
#
# b) Integrate up to the given altitude
while (press>p_top & z<=z_top){
# From z to z+dz
z <- z + dz
#
# Moist adiabatic lapse rate
#q_sat=calc_sat_mixr(press,tavg)
q_sat <- calc_sat_mixr(press,tavg)
tavg <- tavg - g*(1+alvl*q_sat/(R*tavg))/(cp+alvl**2*q_sat/(Rm*tavg**2))*dz
#
# New pressure
xsi <-(1+ep2*q_sat)
press <- press-g*dz*press/(R*tavg*xsi)
#
# Cloud water mixing ratio = totol - vapor
rc <-max(0.,rt-q_sat)
# LWP integral
lwp <- lwp + rc*dz*press/(R*tavg*xsi)
}
#
# Cloud top height
zc <-z
clw_max <-rc
#
# Return LWP (kg/m^2) and boundary layer height (m)
return (c(lwp, zb, zc, clw_max))
}
source("~/Nextcloud/000_WORK/000_Codex/lhs/lib_meteo.R")
source("~/Nextcloud/000_WORK/000_Codex/lhs/lib_meteo.R")
sprintf(fmt="%d", "awf")
sprintf(fmt="%s", "awf")
sprintf(fmt="%s %.2f", "awf", 4.154908)
F | T
source("~/Nextcloud/000_WORK/000_Codex/lhs/lib_meteo.R")
source("lib_meteo.R")
ab <- solve_rw_lwp(101780,
285.28396602292037,
315.58040763791155*1e-3,
260.867076637996*100.)
print(0.0037222520919583764, ab)
bb <- solve_rw_lwp(101780.,293.,100e-3,20000.)
print(0.00723684088331, bb)
source("lib_meteo.R")
ab <- solve_rw_lwp(101780,
285.28396602292037,
315.58040763791155*1e-3,
260.867076637996*100.)
print(0.0037222520919583764, ab)
bb <- solve_rw_lwp(101780.,293.,100e-3,20000.)
print(0.00723684088331, bb)
setwd("/home/aholaj/Nextcloud/000_WORK/000_Codex/lhs")
source("lib_meteo.R")
ab <- solve_rw_lwp(101780,
285.28396602292037,
315.58040763791155*1e-3,
260.867076637996*100.)
print(0.0037222520919583764, ab)
bb <- solve_rw_lwp(101780.,293.,100e-3,20000.)
print(0.00723684088331, bb)
setwd("/home/aholaj/Nextcloud/000_WORK/000_Codex/lhs")
source("lib_meteo.R")
ab <- solve_rw_lwp(101780,
285.28396602292037,
315.58040763791155*1e-3,
260.867076637996*100.)
print(0.0037222520919583764, ab)
bb <- solve_rw_lwp(101780., 293., 100e-3, 20000.)
print(0.00723684088331, bb)
calc_lwp( 101780, 293, 100e-3, 0)
cc <- calc_lwp( 101780, 293, 100e-3, 0)
cc[0]
float(cc[0])
cc[0] + 1
cc[1]
cc[3]
length(cc)
ba <- c(1,2,3)
ba[1]
setwd("/home/aholaj/Nextcloud/000_WORK/000_Codex/lhs")
source("lib_meteo.R")
ab <- solve_rw_lwp(101780,
285.28396602292037,
315.58040763791155*1e-3,
260.867076637996*100.)
print(0.0037222520919583764, ab)
bb <- solve_rw_lwp(101780., 293., 100e-3, 20000.)
print(0.00723684088331, bb)
bb
setwd("/home/aholaj/Nextcloud/000_WORK/000_Codex/lhs")
source("lib_meteo.R")
ab <- solve_rw_lwp(101780,
285.28396602292037,
315.58040763791155*1e-3,
260.867076637996*100.)
print(paste(0.0037222520919583764, ab))
bb <- solve_rw_lwp(101780., 293., 100e-3, 20000.)
print(paste(0.00723684088331, bb))
cd <- calc_lwp( 101780, 293, 100e-3, 0.00372225209195838)
cd
calc_lwp(101780,
285.28396602292037,
260.867076637996*100., 0.00372225209195838)
cd <- calc_lwp(101780,
285.28396602292037,
260.867076637996*100., 0.00372225209195838)
cd[3]
require(stats)
x <- matrix(1:10, ncol = 2)
(centered.x <- scale(x, scale = FALSE))
cov(centered.scaled.x <- scale(x)) # all 1
# }
x
file <- "/home/aholaj/Data/ECLAIR/sample.csv"
data <- read.csv(file)
data
data["q_inv"]
head(data["q_inv"])
head(data["tpot_inv"])
data(iris)
tree <- rpartXse(Species ~ ., iris)
tree
## A visual representation of the classification tree
## Not run:
# prettyTree(tree)
# ## End(Not run)
install.packages("rpart")
mad
sobo(1e10, 2)
sobol(1e10, 2)
data
data.max
data.max()
log(max(data))
library(boot)
sobol(1e20,11)
# NOT RUN {
# Test case : the non-monotonic Sobol g-function
# The method of sobol requires 2 samples
# (there are 8 factors, all following the uniform distribution on [0,1])
library(boot)
n <- 1000
X1 <- data.frame(matrix(runif(8 * n), nrow = n))
X2 <- data.frame(matrix(runif(8 * n), nrow = n))
# sensitivity analysis
x <- sobol(model = sobol.fun, X1 = X1, X2 = X2, order = 2, nboot = 100)
print(x)
#plot(x)
library(ggplot2)
ggplot(x)
# }
install.packages("ggplot")
sobol(1e10, 2)
sobol()
install.packages('sensitivity')
sobol(1)
sobol
sobol()
library(mined)
library(randtoolbox)
install.packages("randtoolbox")
sobol(1)
library("sobol")
library("randtoolbox")
require("rngWELL")
sobol(1)
sobol(12)
file <- "/home/aholaj/Data/ECLAIR/sample.csv"
data <- read.csv(file)
print(data)
data
head(data)
min(data["q_inv"])
max(data["q_inv"])
seq(5)
length(seq(5))
c(5)
c(1:5)
a <- c(1:5)
data[1]
data[,1]
data[0,1]
data[1,1]
data[1]
shape(data)
length(data)
data[c(1),,1]
x<-data[c(1),,1]
x
x$as
array(x)
x<-array(x)
x
x[1]
flatten(x)
install.packages("ramify")
flatten(x)
library("ramify")
flatten(x)
flatten(x, across="columns")
x<-data[c(1),]
x
x[1]
x<-data[c(1)]
x
x<-data[c(1),]
x
x[1]
x[1] + x[2]
x[1] + x[2]-4878538
c1 <- 0.4 - 1938 +1
c_nn <- NULL
c(c1,c_nn)
c1
c(121,1341, c(121, 12098))
c(121,1341, c(121, 12098))[2]
c(121,1341, c(121, 12098))[3]
c(121,1341, c(121, 12098))[4]
#source("../CoMinED/scripts/lib.R")
source("lib_meteo.R")
library("randtoolbox")
require("rngWELL")
source_data_file_name <- "/home/aholaj/Data/ECLAIR/sample20000.csv"
source_data <- read.csv(source_data_file_name)
constraint <- function(x){
p_surf <- 101780.
q_inv <- x[1]
tpot_inv <- x[2]
lwp <- x[3]
tpot_pbl <- x[4]
pbl <- x[5]
cdnc <- x[6]
ks <- x[7]
as <- x[8]
cs <- x[9]
rdry_AS_eff <-x[10]
cos_mu <- x[11]
q_pbl <- solve_rw_lwp(p_surf,
tpot_pbl,
lwp*1e-3,
pbl*100)*1e3
c1 <- q_inv - q_pbl + 1
constrain_extreme_values <- TRUE
c_min_values <- NULL
c_max_values <- NULL
if (constrain_extreme_values) {
c_min_values <- c(1:length(x))
c_max_values <- c(1:length(x))
for (i in 1:length(x)){
c_min_values[i] <- x[i] - max(source_data[i])
c_max_values[i] <- min(source_data[i]) - x[i]
}
}
return (c(c1, c_min_values, c_max_values))
}
x
x[2:]
x[2,]
x[2,,]
x[2]
x[,2]
x[,,2]
x[]
x[2:11]
constraint(x[2:11])
rownames(x)
1:nrow(df)
1:nrow(x)
seq(1:nrow(x))
seq(1:nrow(X))
seq(1:nrow(data))
1:nrow(data)
rownames(data)
colnames(data)
1:ncol(data)
library(hash)
install.packages("hash")
hh <- hash()
library("hash")
hh <- hash()
for (i in 1:length(x)){
hh[[colnames(data)[i]]] <- ncol(data)[i]
}
hh
for (i in 1:length(x)){
hh[[colnames(data)[i]]] <- i
}
hh
hh[["as"]]
hh[["as"]] + hh[["cs"]]
c(1:length)
c(1:length(data))
head(source_data)
#source("../CoMinED/scripts/lib.R")
source("lib_meteo.R")
library("randtoolbox")
require("rngWELL")
source_data_file_name <- "/home/aholaj/Data/ECLAIR/sample20000.csv"
source_data <- read.csv(source_data_file_name)
constraint <- function(x){
index_keys <- c(1:11)
p_surf <- 101780.
q_inv <- x[1]
index_keys[1] <- "q_inv"
tpot_inv <- x[2]
index_keys[2] <- "tpot_inv"
lwp <- x[3]
index_keys[3] <- "lwp"
tpot_pbl <- x[4]
index_keys[4] <- "tpot_pbl"
pbl <- x[5]
index_keys[5] <- "pbl"
cdnc <- x[6]
index_keys[6] <- "cdnc"
ks <- x[7]
index_keys[7] <- "ks"
as <- x[8]
index_keys[8] <- "as"
cs <- x[9]
index_keys[9] <- "cs"
rdry_AS_eff <-x[10]
index_keys[10] <- "rdry_AS_eff"
cos_mu <- x[11]
index_keys[11] <- "cos_mu"
q_pbl <- solve_rw_lwp(p_surf,
tpot_pbl,
lwp*1e-3,
pbl*100)*1e3
c1 <- q_inv - q_pbl + 1
constrain_extreme_values <- TRUE
c_min_values <- NULL
c_max_values <- NULL
if (constrain_extreme_values) {
c_min_values <- c(1:length(x))
c_max_values <- c(1:length(x))
for (i in 1:length(x)){
c_min_values[i] <- x[i] - max(source_data[index_keys[i]])
c_max_values[i] <- min(source_data[index_keys[i]]) - x[i]
}
}
return (c(c1, c_min_values, c_max_values))
}
x
constrain(x[2:12])
constraint(x[2:12])
x[4]
float(x[4])
x[[4]]
#source("../CoMinED/scripts/lib.R")
source("lib_meteo.R")
library("randtoolbox")
require("rngWELL")
source_data_file_name <- "/home/aholaj/Data/ECLAIR/sample20000.csv"
source_data <- read.csv(source_data_file_name)
constraint <- function(x){
index_keys <- c(1:11)
p_surf <- 101780.
q_inv <- x[[1]]
index_keys[1] <- "q_inv"
tpot_inv <- x[[2]]
index_keys[2] <- "tpot_inv"
lwp <- x[[3]]
index_keys[3] <- "lwp"
tpot_pbl <- x[[4]]
index_keys[4] <- "tpot_pbl"
pbl <- x[[5]]
index_keys[5] <- "pbl"
cdnc <- x[[6]]
index_keys[6] <- "cdnc"
ks <- x[[7]]
index_keys[7] <- "ks"
as <- x[[8]]
index_keys[8] <- "as"
cs <- x[[9]]
index_keys[9] <- "cs"
rdry_AS_eff <-x[[10]]
index_keys[10] <- "rdry_AS_eff"
cos_mu <- x[[11]]
index_keys[11] <- "cos_mu"
q_pbl <- solve_rw_lwp(p_surf,
tpot_pbl,
lwp*1e-3,
pbl*100)*1e3
c1 <- q_inv - q_pbl + 1
constrain_extreme_values <- TRUE
c_min_values <- NULL
c_max_values <- NULL
if (constrain_extreme_values) {
c_min_values <- c(1:length(x))
c_max_values <- c(1:length(x))
for (i in 1:length(x)){
c_min_values[i] <- x[[i]] - max(source_data[index_keys[i]])
c_max_values[i] <- min(source_data[index_keys[i]]) - x[[i]]
}
}
return (c(c1, c_min_values, c_max_values))
}
x[2:12]
x[[2:12]]
x[2:12]
x[2:12,]
x[2:12]
x[2:12][1]
x[2:12][1:12]
x[2:12][2:12]
x[2:12][1:12]
x[2:12][1:11]
as.list(x[2:12])
as.vector(x[2:12])
xx <- c(1:11)
for (i in 1:length(xx)){}
for (i in 1:length(xx)){
xx[i] <- x[[i+1]]
}
xx
xx[1]
constraint(xx)
library("lhs")
set.seed(10)
x <- matrix(rnorm(200*2, sd = 10, mean = 5), ncol = 2)
plot(x)
x_scaled <- scale_uniform(x, center = 0, max_range = 1)
install.packages("dynverse")
install.packages("dynutils")
library("dynutils")
x_scaled <- scale_uniform(x, center = 0, max_range = 1)
plot(x_scaled)
plot(x)
plot(x_scaled)
apply(x_scaled, 2, range)
lhs <- randomLHS(4500, 2)
lsh
plot(lhs)
data["q_inv"]
aa <- scale(data["q_inv"])
plot(aa)
lhs <- randomLHS(4500, 1)
lhs
plot(lhs)
unscale(lhs, scale(data["q_inv"]))
mad
plot(density(lhs))
plot(density(data["q_inv"]))
head(data["q_inv"])
head(data["q_inv"][,])
data["q_inv"][,]
plot(density(data["q_inv"][,]))
plot(density(data["q_inv"][,]), xln=c())
dd <- data["q_inv"][,]
plot(density(dd), xlim=c(min(dd), max(dd)))
dd <- data["q_inv"][,]
plot(density(dd), xlim=c(min(dd), max(dd)), title="q_inv density source")
plot(density(dd), xlim=c(min(dd), max(dd)), main="q_inv density source")
lhs
lhs_unscaled <- unscale(lhs, scale(dd))
library("DMwR")
install.packages("DMwR")
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
2*6+1
3*6+1
3*10+1
2*10+1
for i in c(6,7,9,10){}
for (i in c(6,7,9,10)){}
for (p in c(6,7,9,10)){
print(2*p+1, 3*p+1)
}
for (p in c(6,7,9,10)){
print(paste(2*p+1, 3*p+1))
}
ceiling(1.32)
tau
tau <- c(0,exp(c(1:7)),1e6)
length(tau)
seq(10,500,10)
